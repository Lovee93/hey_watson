{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","text","fetch","then","response","json","token","stream","recognizeMic","Object","assign","objectMode","format","on","data","setState","results","alternatives","transcript","err","console","log","document","querySelector","onclick","stop","bind","catch","error","className","onClick","this","onListenClick","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","render","StrictMode","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"gXAsDeA,E,kDAhDb,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXC,KAAM,IAHI,E,4DAOE,IAAD,OACbC,MAAM,0EACHC,MAAK,SAASC,GACb,OAAOA,EAASC,UACfF,MAAK,SAACG,GAEX,IAAIC,EAASC,IAAaC,OAAOC,OAAOJ,EAAO,CAC3CK,YAAY,EACZC,QAAQ,KAGZL,EAAOM,GAAG,QAAQ,SAACC,GACjB,EAAKC,SAAS,CACZd,KAAMa,EAAKE,QAAQ,GAAGC,aAAa,GAAGC,gBAI1CX,EAAOM,GAAG,SAAS,SAASM,GACxBC,QAAQC,IAAIF,MAGhBG,SAASC,cAAc,SAASC,QAAUjB,EAAOkB,KAAKC,KAAKnB,MAExDoB,OAAM,SAASC,GAChBR,QAAQC,IAAIO,Q,+BAKd,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,4CACA,4BAAQC,QAASC,KAAKC,cAAcN,KAAKK,MAAOF,UAAU,iBAA1D,cACA,4BAAKE,KAAK/B,MAAMC,Y,GA3CRgC,aCQZC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTtC,MAAK,SAAA2C,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBhD,QACf2C,UAAUC,cAAcO,YAI1B/B,QAAQC,IACN,iHAKEqB,GAAUA,EAAOU,UACnBV,EAAOU,SAASN,KAMlB1B,QAAQC,IAAI,sCAGRqB,GAAUA,EAAOW,WACnBX,EAAOW,UAAUP,WAO5BnB,OAAM,SAAAC,GACLR,QAAQQ,MAAM,4CAA6CA,MC1FjE0B,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFlC,SAASmC,eAAe,SDYnB,SAAkBf,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIe,IAAIC,cAAwBvB,OAAOC,SAASuB,MACpDC,SAAWzB,OAAOC,SAASwB,OAIvC,OAGFzB,OAAO0B,iBAAiB,QAAQ,WAC9B,IAAMrB,EAAK,UAAMkB,cAAN,sBAEPzB,IAgEV,SAAiCO,EAAOC,GAEtCxC,MAAMuC,EAAO,CACXsB,QAAS,CAAE,iBAAkB,YAE5B5D,MAAK,SAAAC,GAEJ,IAAM4D,EAAc5D,EAAS2D,QAAQE,IAAI,gBAEnB,MAApB7D,EAAS8D,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CxB,UAAUC,cAAcwB,MAAMjE,MAAK,SAAA2C,GACjCA,EAAauB,aAAalE,MAAK,WAC7BiC,OAAOC,SAASiC,eAKpB9B,EAAgBC,EAAOC,MAG1Bf,OAAM,WACLP,QAAQC,IACN,oEAvFAkD,CAAwB9B,EAAOC,GAI/BC,UAAUC,cAAcwB,MAAMjE,MAAK,WACjCiB,QAAQC,IACN,iHAMJmB,EAAgBC,EAAOC,OClC/BE,K","file":"static/js/main.4048109a.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport recognizeMic from 'watson-speech/speech-to-text/recognize-microphone';\n\nclass App extends Component{\n  \n  constructor() {\n    super();\n    this.state = {\n      text: ''\n    }\n  }\n\n  onListenClick(){\n    fetch('https://nameless-fortress-57383.herokuapp.com/api/speech-to-text/token')\n      .then(function(response) {\n        return response.json();\n      }).then((token) => {\n\n    var stream = recognizeMic(Object.assign(token, {\n        objectMode: true, // send objects instead of text\n        format: false // optional - performs basic formatting on the results such as capitals an periods\n    }));\n    \n    stream.on('data', (data) => {\n      this.setState({\n        text: data.results[0].alternatives[0].transcript\n      })\n    });\n\n    stream.on('error', function(err) {\n        console.log(err);\n    });\n\n    document.querySelector('#stop').onclick = stream.stop.bind(stream);\n\n    }).catch(function(error) {\n      console.log(error);\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>Wanna Speak?</h1>\n          <button onClick={this.onListenClick.bind(this)} className=\"goForItButton\">Go for it!</button>\n          <h3>{this.state.text}</h3>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}